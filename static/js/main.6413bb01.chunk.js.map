{"version":3,"sources":["components/mockserver.tsx","components/Footer/Footer.tsx","components/HeaderTask/HeaderTask.tsx","components/TextTask/TextTask.tsx","components/Task/Task.tsx","components/HeaderCode/HeaderCode.tsx","components/CodeEditor/CodeEditor.tsx","components/Code/Code.tsx","components/HeaderResult/HeaderResult.tsx","components/TextResult/TextResult.tsx","components/Result/Result.tsx","App.tsx","index.js"],"names":["processCode","async","code","language","answer","Promise","resolve","reject","setTimeout","outputCheck","checkSolution","status","output","err","concat","String","_ref","statusOutput","startPrint","i","newCode","step","endPrint","indexOf","console","log","substring","eval","mockServer","window","fetch","url","options","req","method","JSON","parse","body","Response","stringify","headers","Content-Type","handleRequest","Footer","React","createElement","className","Date","getFullYear","HeaderTask","numberTask","handleTaskChange","tasks","value","onChange","map","el","index","key","id","name","TextTask","textTask","Task","HeaderCode","handleLanguageChange","isLoading","handleRunCode","onClick","disabled","CodeEditor","initialCode","theme","editorRef","useRef","useEffect","extensions","javascript","python","elCodeMirror","document","querySelector","heigthCodeMirror","offsetHeight","CodeMirror","dracula","undefined","height","onUpdate","update","current","view","Code","HeaderResult","TextResult","consoleOutput","elTextTask","heigthResultText","style","Result","App","setIsLoading","useState","setConsoleOutput","setLanguage","setCode","setNumberTask","setTextTask","description","setAnswer","newNumberTask","handleTextTaskChange","Fragment","e","target","response","ok","result","json","statusText","error","message","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6413bb01.chunk.js","sourcesContent":["\r\nconst processCode = async (code: string, language: string, answer: number|string): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            try {\r\n                const outputCheck = checkSolution({code, language, answer});\r\n                resolve({status: outputCheck.status, output: outputCheck.output });\r\n\r\n                } catch (err) {\r\n              reject({ status: 'Error', output: `> Error: ${String(err)}\\n` });\r\n            }\r\n        }, 1000);  \r\n    });\r\n};\r\n\r\ninterface solutionOutput{\r\n    status: string,\r\n    output: string,\r\n}\r\n\r\ninterface solutionInput{\r\n    code: string, \r\n    language: string, \r\n    answer: number|string\r\n}\r\n\r\nconst checkSolution: (input: solutionInput) => solutionOutput = ({ code, language, answer }) => {\r\n\r\n    //здесь должен быть анализатор отдельно по каждому языку\r\n    //сейчас в коде отыскивается только один Print или console.log.  Для большего количества должна быть рекурсивная функция.\r\n    let statusOutput;\r\n    let startPrint = -1;\r\n    let i = 0;\r\n    let newCode = code;\r\n    let step = 0;\r\n    if (language === 'python'){\r\n        startPrint = code.indexOf('print(')\r\n        console.log('startPrint=', startPrint)        \r\n        step = 6;        \r\n    }\r\n    if (language === 'javaScript')\r\n    {\r\n        startPrint = code.indexOf('console.log');\r\n        step = 12;\r\n    }    \r\n    let endPrint;\r\n    if( startPrint >= 0){\r\n        endPrint = code.indexOf(')', startPrint + step);\r\n        newCode = code.substring(0, startPrint - 1)\r\n        newCode = newCode + '\\n let x' + i + '=' + code.substring(startPrint+step, endPrint) + '\\n x' + i;\r\n        code = code.substring(endPrint + 1);\r\n    } \r\n        \r\n    let output = eval(newCode);\r\n    \r\n    if (output === answer){\r\n        statusOutput = 'Success';\r\n    } else{\r\n        statusOutput = 'Error';\r\n    }\r\n    \r\n\r\n    return {\r\n        status: statusOutput,\r\n        output: output\r\n    }\r\n}\r\n\r\nconst mockServer = () => {\r\n    const handleRequest = async (req: {\r\n        method: string,\r\n        url: string,\r\n        headers: HeadersInit |undefined,\r\n        body: string\r\n    }) => {\r\n        if (req.method === 'POST' && req.url === '/execute') {\r\n            const { code, language, answer } = JSON.parse(req.body)\r\n            const output = await processCode(code, language, answer);\r\n\r\n          return  new Response(JSON.stringify(output), { status: 200, headers: { 'Content-Type': 'application/json' }})\r\n        }\r\n\r\n       return new Response('Not found', { status: 404 })\r\n\r\n    }\r\n\r\n    window.fetch = async (url, options) => {\r\n        return handleRequest({ method: options?.method || 'GET', url: url as string, headers: options?.headers , body: options?.body as string})\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default mockServer","import React from 'react';\r\n\r\nfunction Footer () {\r\n    return (\r\n        \r\n        <footer className=\"page-footer pt-3\">\r\n                <div className=\"footer-copyright\">\r\n                <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                                <div className=\"col-12 text-grey\">\r\n                                        \r\n                © {new Date().getFullYear()} Development of Alena Motorina\r\n                                </div>\r\n                        </div>\r\n                </div>\r\n                </div>\r\n        </footer>\r\n        )\r\n}\r\n\r\nexport { Footer }","import React from \"react\";\r\n\r\ninterface taskObj{\r\n    id: number;\r\n      name: string;\r\n      description: string;\r\n      answer: string;\r\n\r\n}\r\n\r\ninterface HeaderTaskProps{\r\n    numberTask: number;\r\n    handleTaskChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    tasks: taskObj[];\r\n\r\n}\r\n\r\nfunction HeaderTask({numberTask = 1, handleTaskChange, tasks}: HeaderTaskProps) {\r\n    return <div className=\"row bg-gray rounded-top-2\">\r\n        <div className=\"col-12 p-3\">\r\n            <div className=\"col-6\">\r\n                <select className='form-select' value={numberTask} onChange={handleTaskChange}>\r\n                    {tasks.map((el, index) => <option key = {el.id} value={el.id}>{el.name}</option>)}\r\n                </select>\r\n        \r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport { HeaderTask }","import React from \"react\";\r\n\r\ninterface TextTaskProps{\r\n    textTask: string;\r\n}\r\n\r\nfunction TextTask({textTask}: TextTaskProps) {\r\n    return <div className=\"row overflow-y-auto task-text  border-gray\">\r\n        <div className=\"col-12  \">\r\n            <div className=\"\">\r\n                {textTask} \r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\nexport { TextTask }","import React from \"react\";\r\nimport { HeaderTask } from \"../HeaderTask/HeaderTask\";\r\nimport { TextTask } from \"../TextTask/TextTask\";\r\n\r\ninterface taskObj{\r\n    id: number;\r\n      name: string;\r\n      description: string;\r\n      answer: string;\r\n\r\n}\r\n\r\ninterface TaskProps{\r\n    textTask: string;\r\n    numberTask: number;\r\n    handleTaskChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    tasks: taskObj[];\r\n}\r\n\r\nfunction Task({textTask, numberTask,  handleTaskChange, tasks} : TaskProps){\r\n    return <div className=\"row h-100 pt-3 pe-lg-3\">\r\n        <div className=\"col-12 h-100  bg-white\"> \r\n            <HeaderTask  numberTask={numberTask} handleTaskChange={handleTaskChange} tasks={tasks}/>\r\n            <TextTask textTask={textTask}/>\r\n        </div>\r\n    </div>\r\n}\r\nexport { Task }","import React from \"react\";\r\n\r\ninterface HeaderCodeProps{\r\n    handleLanguageChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    language: string;\r\n    handleRunCode: () => void;\r\n    isLoading: boolean\r\n}\r\nfunction HeaderCode({handleLanguageChange, language , isLoading, handleRunCode}: HeaderCodeProps){\r\n    return  <div className=\"editor-toolbar\">\r\n        <div className=\"row bg-gray p-3  rounded-top-2\">\r\n            <div className=\"col-6\">\r\n                <select className='form-select' value={language} onChange={handleLanguageChange}>\r\n                    <option value=\"javascript\">JavaScript</option>\r\n                    <option value=\"python\">Python</option>\r\n                </select>\r\n        \r\n            </div>\r\n            <div className=\"col-6 d-flex justify-content-end\">            \r\n                <button className='btn btn-primary'onClick={handleRunCode} disabled={isLoading}>\r\n                    {isLoading ? 'Process...' : 'Run'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\nexport { HeaderCode }","import React, { useState, useEffect, useRef } from 'react';\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport { javascript } from '@codemirror/lang-javascript';\r\nimport { EditorView } from \"@codemirror/view\";\r\nimport { dracula } from '@uiw/codemirror-theme-dracula';\r\nimport { python } from '@codemirror/lang-python'\r\n\r\ninterface CodeEditorProps {\r\n  initialCode?: string;\r\n  onChange: (code: string) => void;\r\n  theme?: string;\r\n  language: string;\r\n  code?: string;\r\n  \r\n}\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({\r\n  initialCode = \"\",\r\n  onChange,\r\n  theme = 'dracula',\r\n  language = 'javaScript',\r\n  code = ''\r\n}) => {\r\n  const editorRef = useRef<EditorView | null>(null);\r\n\r\n  useEffect(() => {\r\n    onChange(initialCode)\r\n  }, [initialCode]);\r\n\r\n\r\n  const handleChange = (value: string) => {\r\n      onChange(value);\r\n    if (onChange) {\r\n      onChange(value);\r\n    }\r\n  };\r\n\r\n  \r\nlet extensions = [];\r\n  switch (language) {\r\n      case \"javascript\":\r\n          extensions = [javascript()]\r\n          break\r\n      case \"python\":\r\n          extensions = [python()]\r\n          break\r\n      default:\r\n          extensions = [javascript()]\r\n  }\r\n\r\n  const elCodeMirror = document.querySelector('.task-text') as HTMLElement | null;\r\n  let heigthCodeMirror: string;\r\n    if (elCodeMirror) {\r\n      heigthCodeMirror = (elCodeMirror.offsetHeight * 2 / 3) + 'px';\r\n    } else {\r\n      heigthCodeMirror =  '500px'; \r\n    }\r\n\r\n  return (\r\n    <div className=\"code-editor-container h-100\">\r\n        <CodeMirror\r\n            value={code}\r\n            theme={theme === 'dracula' ? dracula : undefined}\r\n            height={heigthCodeMirror}\r\n            extensions={extensions}\r\n            onChange={handleChange}\r\n            onUpdate={(update) => {\r\n                editorRef.current = update.view;\r\n            }}\r\n        />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CodeEditor }","import React, {useState, useEffect} from \"react\";\r\nimport { HeaderCode } from \"../HeaderCode/HeaderCode\"; \r\nimport { CodeEditor } from \"../CodeEditor/CodeEditor\";\r\nimport mockServer from \"../mockserver\";\r\n\r\ninterface codeProps{\r\n  language: string;\r\n  answer: string | number;\r\n  handleLanguageChange: (e: React.ChangeEvent<HTMLSelectElement>)=> void;\r\n  isLoading: boolean;\r\n  handleRunCode: () => void;\r\n  code?: string;\r\n  onChange: (value: string) => void;\r\n\r\n}\r\n\r\nfunction Code({language, answer, handleLanguageChange, isLoading, handleRunCode, code, onChange}: codeProps) {\r\n      \r\n    useEffect(() => {\r\n        mockServer();\r\n    }, []);\r\n\r\n    \r\n    return <div className=\"row pt-3  \">\r\n        <div className=\"col-12\">\r\n            <HeaderCode handleLanguageChange={handleLanguageChange} isLoading={isLoading} language={language} handleRunCode={handleRunCode}/>\r\n        </div>\r\n        <div className=\"col-12 h-100 p-0\">\r\n            \r\n            <div>\r\n              <CodeEditor initialCode={code} onChange={onChange} language={language} code={code} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\nexport { Code }","import React from \"react\";\r\n\r\nfunction HeaderResult(){\r\n    return <div className=\"row \">\r\n        <div className=\"col-12\">\r\n            <div className=\" p-3  fs-6\">Result</div>\r\n        </div>\r\n    </div>\r\n}\r\nexport { HeaderResult }","import React from \"react\";\r\ninterface textResultProps{\r\n    consoleOutput: string;\r\n}\r\n\r\nfunction TextResult({consoleOutput = ''}: textResultProps){\r\n\r\n    \r\n    const elTextTask = document.querySelector('.task-text') as HTMLElement | null;\r\n  let heigthResultText: string;\r\n    if (elTextTask) {\r\n      heigthResultText = (elTextTask.offsetHeight  / 3 - 56 - 16) + 'px';\r\n    } else {\r\n        heigthResultText =  '100px'; \r\n    }\r\n\r\n    return <div className=\"row\">\r\n        <div className=\"col-12 h-100\">\r\n            \r\n          <div className=\"code-console overflow-y-auto\" style={{height: `${heigthResultText}`}}>\r\n              <pre>{consoleOutput}</pre>\r\n          </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport{ TextResult }","import React from \"react\";\r\nimport { HeaderResult } from \"../HeaderResult/HeaderResult\";\r\nimport { TextResult } from \"../TextResult/TextResult\";\r\n\r\ninterface resultProps{\r\n    consoleOutput: string;\r\n}\r\n\r\nfunction Result({consoleOutput}: resultProps) {\r\n    return <div className=\"row pt-3\">\r\n        <div className=\"col-12 bg-gray rounded-top-2\">\r\n            <HeaderResult />\r\n        </div>\r\n        <div className=\"col-12 h-100 bg-white border-gray\">\r\n            <TextResult consoleOutput={consoleOutput}/>\r\n        </div>\r\n    </div>\r\n    \r\n}\r\n\r\nexport { Result }","import './App.css';\nimport React, {useEffect, useState} from 'react';\nimport { Footer } from './components/Footer/Footer';\nimport { Task } from './components/Task/Task';\nimport { Code } from './components/Code/Code';\nimport { Result } from './components/Result/Result'\n\nfunction App() {\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [consoleOutput, setConsoleOutput] = useState('');\n  const [language,setLanguage] = useState('javaScript');\n  const [code, setCode] = useState(`//Введите сюда код`);\n  const [numberTask, setNumberTask] = useState(1);\n  const [textTask, setTextTask] = useState('');\n\n  const tasks = [\n    {\n      id: 0,\n      name: 'Задание 1',\n      description: 'Выведи на экран текст: Hello, world!',\n      answer: 'Hello, world!',\n    },\n    {\n      id: 1,\n      name: 'Задание 2',\n      description: 'Есть 2 строки \"abc\" и \"def\". \\n\\r Выведи на экран строку \"abcdef\" ',\n      answer: 'abcdef'\n    }\n  ]\n\n\n  const [answer,setAnswer] = useState<number | string>(tasks[0].answer);\n\n  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setLanguage(e.target.value);\n  };\n\n  const handleTaskChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setNumberTask(+e.target.value);\n    setAnswer(tasks[+e.target.value].answer);\n  };\n\n  \n  const handleCodeChange = (newCode: string) => {\n    setCode(newCode);\n  };\n\n  const handleTextTaskChange = (newNumberTask : number) => {\n    setTextTask(tasks[newNumberTask].description);\n  }\n\n  useEffect(() => {\n    handleTextTaskChange(numberTask);\n\n  }, [numberTask])\n\n  const handleRunCode = async () => {\n    setIsLoading(true);\n    setConsoleOutput('Executing...\\n');\n    try {\n      const response = await fetch('/execute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ code, language, answer }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setConsoleOutput(result.output + '\\n' + result.status);\n      } else {\n        setConsoleOutput(`Error: ${response.status} ${response.statusText}\\n`);\n      }\n    } catch (error: any) {\n        setConsoleOutput(`Error: ${error.message}\\n`)\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  return (<>\n  <div className='h-100vh  p-3'>\n  <div className='container-fluid h-100-footer'>\n\n    <main className='row h-100'>\n        \n          <div className='col-12  col-lg-4  ' >\n            <Task numberTask={numberTask} handleTaskChange={handleTaskChange} textTask={textTask} tasks={tasks}/>  \n\n          </div>\n          <div className='col-12  col-lg-8'>\n            <Code language={language} answer={answer} handleLanguageChange={handleLanguageChange} handleRunCode={handleRunCode} isLoading={isLoading} code={code} onChange={handleCodeChange}/>  \n            <Result consoleOutput={consoleOutput}/>\n          </div>\n\n        \n\n    </main>\n    <Footer />\n    </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}